// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reservations  Reservation[]
    roleId        String?
    role          Role?         @relation(fields: [roleId], references: [id], onDelete: Cascade) // Agregar onDelete: Cascade
    cart          Cart?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id    String @id @default(cuid())
    name  String @unique
    users User[]
}

model Reservation {
    id             String   @id @default(cuid())
    completeName   String
    email          String
    numberOfPeople Int
    startDate      DateTime
    endDate        DateTime
    finalPrice     String
    userId         String
    payMethod      String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
    id        String     @id @default(cuid())
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     CartItem[] // Add this line to establish the relation to CartItem
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Item {
    id          String     @id @default(cuid())
    name        String
    description String
    price       String
    imageUrl    String
    categoryId  String     // Foreign key to Category
    category    Category   @relation(fields: [categoryId], references: [id])
    carts       CartItem[] // Add this line to establish the relation to CartItem
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

// Renamed from CartegotyItem to Category
model Category {
    id    String @id @default(cuid())
    name  String @unique
    items Item[] // Add this relation field to establish the one-to-many relationship
}

// Add this new model to represent the many-to-many relationship
model CartItem {
    id        String   @id @default(cuid())
    cartId    String
    itemId    String
    quantity  Int      @default(1)
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
    item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([cartId, itemId])
}
